)
)
shinyApp(ui, server)
ui <- navBarPage("Stock Screener",
tabPanel('data', div(uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date() )
, align= "center")),
tabPanel('plot', div(plotlyOutput('data_plotly', width = '60%', height = '800px')), align = "center"),
tabsetPanel(
tabPanel('data', DT::dataTableOutput('ticker_data')),
tabPanel('ggplot',plotOutput("data_ggplot"))
)
)
ui <- navbarPage("Stock Screener",
tabPanel('data', div(uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date() )
, align= "center")),
tabPanel('plot', div(plotlyOutput('data_plotly', width = '60%', height = '800px')), align = "center"),
tabsetPanel(
tabPanel('data', DT::dataTableOutput('ticker_data')),
tabPanel('ggplot',plotOutput("data_ggplot"))
)
)
shinyApp(ui, server)
ui <- navbarPage("Stock Screener", theme = shinytheme('superhero'),
tabPanel('data', div(uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date() )
, align= "center")),
tabPanel('plot', div(plotlyOutput('data_plotly', width = '60%', height = '800px')), align = "center"),
tabsetPanel(
tabPanel('data', DT::dataTableOutput('ticker_data')),
tabPanel('ggplot',plotOutput("data_ggplot"))
)
)
install.packages("shinythemes")
ui <- navbarPage("Stock Screener", theme = shinytheme('superhero'),
tabPanel('data', div(uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date() )
, align= "center")),
tabPanel('plot', div(plotlyOutput('data_plotly', width = '60%', height = '800px')), align = "center"),
tabsetPanel(
tabPanel('data', DT::dataTableOutput('ticker_data')),
tabPanel('ggplot',plotOutput("data_ggplot"))
)
)
ui <- navbarPage("Stock Screener", theme = shinythemes::shinytheme('superhero'),
tabPanel('data', div(uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date() )
, align= "center")),
tabPanel('plot', div(plotlyOutput('data_plotly', width = '60%', height = '800px')), align = "center"),
tabsetPanel(
tabPanel('data', DT::dataTableOutput('ticker_data')),
tabPanel('ggplot',plotOutput("data_ggplot"))
)
)
shinyApp(ui, server)
install.packages("shinydashboard")
install.packages("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
),
dashboardBody(
DT::dataTableOutput('tickr_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')
)
)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
),
dashboardBody(
DT::dataTableOutput('tickr_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')
)
)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
),
dashboardBody(
DT::dataTableOutput('tickr_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')
)
)
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
),
dashboardBody(
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')
)
)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
),
dashboardBody(
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')
)
)
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabname = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
), # press f1 to check library
menuItem('Plot', tabname = 'plot', icon = icon('graph'))
),
),
dashboardBody(
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')
)
)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabname = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
), # press f1 to check library
menuItem('Plot', tabname = 'plot', icon = icon('database'))
),
),
dashboardBody(
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')
)
)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabname = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
), # press f1 to check library
menuItem('Plot', tabname = 'plot', icon = icon('database'))
),
),
dashboardBody(
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')
)
)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabname = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
), # press f1 to check library
menuItem('Plot', tabname = 'plot', icon = icon('database'))
)
),
dashboardBody(
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')
)
)
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabname = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
), # press f1 to check library
menuItem('Plot', tabname = 'plot', icon = icon('database'))
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'control',
h1('select date and ticker')
),
tabItem(tabName = 'plot',
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px'))
)
)
)
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabname = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
), # press f1 to check library
menuItem('Plot', tabname = 'plot')
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'control',
h1('select date and ticker')
),
tabItem(tabName = 'plot',
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px'))
)
)
)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabname = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
), # press f1 to check library
menuItem('Plot', tabname = 'plot')
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'control',
h1('select date and ticker')
),
tabItem(tabName = 'plot',
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px'))
)
)
)
shinyApp(ui, server)
df$change >0
df$change >0
df$change >0
df$change>0
df <- get_sp500()
df$change>0
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabname = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date()),
infoBoxOutput('performance_infobox')
), # press f1 to check library
menuItem('Plot', tabname = 'plot')
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'control',
h1('select date and ticker')
),
tabItem(tabName = 'plot',
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px'))
)
)
)
server <- function(input, output) {
df <- get_sp500()
output$ui_tickers <- renderUI({
selectInput(inputId = 'ticker', label = 'Tickers', choices = setNames(df$name, df$description)
, multiple = FALSE)
})
output$selected_ticker_text <- renderText(input$ticker)
reactive_df <- reactive({
t <- get_data_by_ticker_and_date(ticker = input$ticker, start_date = input$date[1], end_date = input$date[2])
#t$date <- as.characters(t$date)
return(t)
})
output$ticker_data <- DT::renderDataTable({
my_render_df(reactive_df())
})
output$data_plotly <- plotly::renderPlotly(
{
get_plot_of_data(reactive_df())
}
)
output$data_ggplot <- renderPlot({
ggplot(reactive_df(), aes(date, close)) + geom_line() + theme_bw()
})
# these are the two functions that we need
#plotly::renderPlotly()
#plotly::plotlyOutput()
output$performance_infobox <- renderInfoBox({
infoBox('Positive performance', paste0(round((sum(df$change>0) / nrow(df) * 100), 0), '%'))
})
}
#renderDataTable()
#dataTableOutput()
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabname = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
), # press f1 to check library
menuItem('Plot', tabname = 'plot')
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'control',
h1('select date and ticker')
),
tabItem(tabName = 'plot',
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')),
infoBoxOutput('performance_infobox')
)
)
)
server <- function(input, output) {
df <- get_sp500()
output$ui_tickers <- renderUI({
selectInput(inputId = 'ticker', label = 'Tickers', choices = setNames(df$name, df$description)
, multiple = FALSE)
})
output$selected_ticker_text <- renderText(input$ticker)
reactive_df <- reactive({
t <- get_data_by_ticker_and_date(ticker = input$ticker, start_date = input$date[1], end_date = input$date[2])
#t$date <- as.characters(t$date)
return(t)
})
output$ticker_data <- DT::renderDataTable({
my_render_df(reactive_df())
})
output$data_plotly <- plotly::renderPlotly(
{
get_plot_of_data(reactive_df())
}
)
output$data_ggplot <- renderPlot({
ggplot(reactive_df(), aes(date, close)) + geom_line() + theme_bw()
})
# these are the two functions that we need
#plotly::renderPlotly()
#plotly::plotlyOutput()
output$performance_infobox <- renderInfoBox({
infoBox('Positive performance', paste0(round((sum(df$change>0) / nrow(df) * 100), 0), '%'))
})
}
#renderDataTable()
#dataTableOutput()
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = 'Stocks'),
dashboardSidebar(
sidebarMenu(
menuItem('Control', tabName = 'control', icon = icon('database'),
uiOutput('ui_tickers'),
dateRangeInput(inputId = 'date', label = 'Select Date', start = Sys.Date() - 365, end = Sys.Date())
), # press f1 to check library
menuItem('Plot', tabName = 'plot')
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'control',
h1('select date and ticker')
),
tabItem(tabName = 'plot',
DT::dataTableOutput('ticker_data'),
plotlyOutput('data_plotly', width = '60%', height = '800px')),
infoBoxOutput('performance_infobox')
)
)
)
server <- function(input, output) {
df <- get_sp500()
output$ui_tickers <- renderUI({
selectInput(inputId = 'ticker', label = 'Tickers', choices = setNames(df$name, df$description)
, multiple = FALSE)
})
output$selected_ticker_text <- renderText(input$ticker)
reactive_df <- reactive({
t <- get_data_by_ticker_and_date(ticker = input$ticker, start_date = input$date[1], end_date = input$date[2])
#t$date <- as.characters(t$date)
return(t)
})
output$ticker_data <- DT::renderDataTable({
my_render_df(reactive_df())
})
output$data_plotly <- plotly::renderPlotly(
{
get_plot_of_data(reactive_df())
}
)
output$data_ggplot <- renderPlot({
ggplot(reactive_df(), aes(date, close)) + geom_line() + theme_bw()
})
# these are the two functions that we need
#plotly::renderPlotly()
#plotly::plotlyOutput()
output$performance_infobox <- renderInfoBox({
infoBox('Positive performance', paste0(round((sum(df$change>0) / nrow(df) * 100), 0), '%'))
})
}
server <- function(input, output) {
df <- get_sp500()
output$ui_tickers <- renderUI({
selectInput(inputId = 'ticker', label = 'Tickers', choices = setNames(df$name, df$description)
, multiple = FALSE)
})
output$selected_ticker_text <- renderText(input$ticker)
reactive_df <- reactive({
t <- get_data_by_ticker_and_date(ticker = input$ticker, start_date = input$date[1], end_date = input$date[2])
#t$date <- as.characters(t$date)
return(t)
})
output$ticker_data <- DT::renderDataTable({
my_render_df(reactive_df())
})
output$data_plotly <- plotly::renderPlotly(
{
get_plot_of_data(reactive_df())
}
)
output$data_ggplot <- renderPlot({
ggplot(reactive_df(), aes(date, close)) + geom_line() + theme_bw()
})
# these are the two functions that we need
#plotly::renderPlotly()
#plotly::plotlyOutput()
output$performance_infobox <- renderInfoBox({
infoBox('Positive performance', paste0(round((sum(df$change>0) / nrow(df) * 100), 0), '%'))
})
}
#renderDataTable()
#dataTableOutput()
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
uiOutput('app')
)
server <- function(input, output) {
USER <- reactiveValues('Logged' = FALSE)
credentials <- list('test' = 123, 'ceu' = 'ceudata')
output$app <- renderUI({
wellPanel(
textInput('username', 'Username'),
textInput('pass', 'Password'),
actionButton('login', 'Log In')
)
})
}
runApp('lastscriptfirstclass.R')
runApp('lastscriptfirstclass.R')
runApp('lastscriptfirstclass.R')
runApp('lastscriptfirstclass.R')
runApp('lastscriptfirstclass.R')
runApp('lastscriptfirstclass.R')
runApp('lastscriptfirstclass.R')
runApp('lastscriptfirstclass.R')
server <- function(input, output) {
USER <- reactiveValues('Logged' = F)
credentials <- list('test' = '123', 'ceu' = 'ceudata')
output$app <- renderUI({
if(USER$Logged == F){
wellPanel(
textInput('username', 'Username'),
textInput('pass', 'Password'),
actionButton('login', 'Log In')
)
} else {
h1('you are logged in')
}
})
observeEvent(input$login,{
if(credentials[[input$username]] == pass){
USER$Logged <- T
}
})
}
shinyApp(ui, server)
runApp('lastscriptfirstclass.R')
runApp('lastscriptfirstclass.R')
pass = "123"
user = "test"
runApp('lastscriptfirstclass.R')
rsconnect::setAccountInfo(name='lofibika', token='C2BE7AE32B1128B5D2ED9188D8394661', secret='tGrQSAJZ5P0/+dJVz1R4ouOLvoT6jY86bp3V6tNw')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='lofibika', token='C2BE7AE32B1128B5D2ED9188D8394661', secret='tGrQSAJZ5P0/+dJVz1R4ouOLvoT6jY86bp3V6tNw')
rsconnect::setAccountInfo(name='lofibika', token='C2BE7AE32B1128B5D2ED9188D8394661', secret='tGrQSAJZ5P0/+dJVz1R4ouOLvoT6jY86bp3V6tNw')
rsconnect::setAccountInfo(name='lofibika', token='C2BE7AE32B1128B5D2ED9188D8394661', secret='tGrQSAJZ5P0/+dJVz1R4ouOLvoT6jY86bp3V6tNw')
runApp('First-Try')
runApp('First-Try')
runApp('First-Try')
runApp('First-Try')
